

import streamlit as st
import pandas as pd

# Kustomoidaan Streamlit-sovelluksen CSS-tyylej√§
st.markdown(""" <style> .reportview-container { margin-top: -2em; } #MainMenu {visibility: hidden;} .stDeployButton {display:none;} footer {visibility: hidden;} #stDecoration {display:none;} </style> """, unsafe_allow_html=True)

# Sovelluksen otsikko
st.title('Data analyzer') 

# Tervetuloviesti
st.write("Hello, üëã I accept Excel files")

# Tiedoston latauskomponentti, joka hyv√§ksyy CSV, XLSX ja XLS tiedostot
file = st.file_uploader("Upload your file here", type=["csv", "xlsx"])
if file is not None:  # Jos k√§ytt√§j√§ on ladannut tiedoston, 'file' ei ole 'None'
    # Erota tiedostonimi ja tiedostop√§√§te (esim. 'data.csv' -> ['data', 'csv'])
    file_extension = file.name.split('.')[-1]
    # Tarkista tiedostop√§√§te ja k√§sittele tiedosto sen mukaan
    if file_extension.lower() == 'csv':  # Jos tiedostop√§√§te on 'csv', lue CSV-tiedosto
        df = pd.read_csv(file)  # Lue CSV-tiedosto pandasin read_csv-funktiolla
    elif file_extension.lower() == 'xlsx':  # Jos tiedostop√§√§te on 'xlsx', lue Excel-tiedosto
        df = pd.read_excel(file, engine='openpyxl')  # Lue Excel-tiedosto openpyxl-moottorilla

    
    st.write("Successfully read file.")  # Ilmoita k√§ytt√§j√§lle, ett√§ tiedosto on luettu onnistuneesti

    
    if df is not None:
        st.write("**Data Overview**")
        # Tulostetaan otsikko "Data Overview" n√§ytt√∂√∂n
        st.write("The first rows of your dataset look like this:")
        # Tulostetaan teksti, joka kertoo k√§ytt√§j√§lle, ett√§ seuraavaksi n√§ytet√§√§n datasetin ensimm√§iset rivit
        st.dataframe(df.head())
        # N√§ytet√§√§n DataFrame-objektin (`df`) ensimm√§iset viisi rivi√§. T√§m√§ auttaa k√§ytt√§j√§√§ saamaan nopean yleiskuvan siit√§, milt√§ data n√§ytt√§√§ ja millaisia sarakkeita datasetti sis√§lt√§√§.

    
    # Perusanalyysi
    if st.checkbox('Show correlation matrix'):
    # Valitaan vain numeeriset sarakkeet korrelaatiomatriisin laskentaa varten
        numeric_df = df.select_dtypes(include=['number'])
        st.write(numeric_df.corr())  # N√§ytet√§√§n korrelaatiomatriisi numeerisille ominaisuuksille
        
        
        # Jos k√§ytt√§j√§ valitsee t√§m√§n valintaruudun, n√§ytet√§√§n pudotusvalikko sarakkeiden valitsemiseksi
    if st.checkbox('Analyze a single variable'):
        # Luo pudotusvalikon, josta k√§ytt√§j√§ voi valita yhden sarakkeen analysoitavaksi
        selected_column = st.selectbox('Select one column', df.columns)
        
        # Tarkistaa, onko valittu sarake numeerinen (float64 tai int64)
        if df[selected_column].dtype in ['float64', 'int64']:
            # N√§ytt√§√§ valitun numeerisen sarakkeen yhteenvetostatistiikat
            st.write(df[selected_column].describe())
            # Piirt√§√§ viivakaavion valitun numeerisen sarakkeen arvoista
            st.line_chart(df[selected_column])
        else:
            # Kategorisille tai tekstisarakkeille, n√§ytet√§√§n arvojen esiintymiskerrat
            st.write(df[selected_column].value_counts())
            # Piirt√§√§ pylv√§skaavion n√§ytt√§m√§√§n, kuinka monta kertaa kunkin arvon esiintyy valitussa sarakkeessa
            st.bar_chart(df[selected_column].value_counts())
            
            
        # Luo uusi ominaisuus -valintaruutu. Jos k√§ytt√§j√§ valitsee t√§m√§n, n√§ytet√§√§n lis√§asetuksia uuden ominaisuuden luomiseksi.
    if st.checkbox('Create a new feature'):
        # Valitse vain numeeriset sarakkeet DataFramesta, koska uuden ominaisuuden laskeminen vaatii numeerisia arvoja.
        numeric_columns = df.select_dtypes(include=['number']).columns
        # Luo pudotusvalikko, josta k√§ytt√§j√§ voi valita ensimm√§isen sarakkeen uutta ominaisuutta varten.
        col1 = st.selectbox('Select first column', numeric_columns)
        # Luo toinen pudotusvalikko, josta k√§ytt√§j√§ voi valita toisen sarakkeen.
        col2 = st.selectbox('Select second column', numeric_columns)
        # Anna k√§ytt√§j√§n valita, mit√§ matemaattista operaatiota k√§ytet√§√§n sarakkeiden v√§lill√§.
        operation = st.selectbox('Select operation', ['+', '-', '*', '/'])
        # Tekstikentt√§ uuden ominaisuuden nimen m√§√§ritt√§miseen.
        new_column_name = st.text_input('Name of the new feature')
        
        # Jos k√§ytt√§j√§ klikkaa "Luo ominaisuus" -nappia, suoritetaan valittu operaatio valituille sarakkeille.
        if st.button('Create Feature'):
            try:
                # Suoritetaan valittu operaatio ja tallennetaan tulos uuteen sarakkeeseen DataFrameen.
                if operation == '+':
                    df[new_column_name] = df[col1] + df[col2]
                elif operation == '-':
                    df[new_column_name] = df[col1] - df[col2]
                elif operation == '*':
                    df[new_column_name] = df[col1] * df[col2]
                elif operation == '/':
                    df[new_column_name] = df[col1] / df[col2]
                # N√§yt√§ DataFrameen ensimm√§iset rivit muutosten j√§lkeen.
                st.write(df.head())
            except TypeError:
                # N√§yt√§ virheviesti, jos valitut sarakkeet eiv√§t ole numeerisia tai jos tapahtuu tyyppivirhe.
                st.error('Please select numeric variables for the operation.')


    # Tekstidatan analyysi -valintaruutu. Jos k√§ytt√§j√§ valitsee t√§m√§n, n√§ytet√§√§n lis√§asetuksia tekstidatan analysoimiseksi.
    if st.checkbox('Text Data Analysis'):
        # Valitse kaikki tekstityypin sarakkeet DataFramesta.
        text_columns = df.select_dtypes(include=['object']).columns
        # Luo pudotusvalikko, josta k√§ytt√§j√§ voi valita tekstisarakkeen analysoitavaksi.
        selected_text_column = st.selectbox('Select text column', text_columns)
        # Kun k√§ytt√§j√§ klikkaa "Analyze" -nappia, suoritetaan analyysi valitulle tekstisarakkeelle.
        if st.button('Analyze'):
            # N√§yt√§ viesti, joka ilmoittaa, mit√§ saraketta analysoidaan.
            st.write(f'Most common words in {selected_text_column}:')
            # Tuo Counter luokka collections moduulista laskeaksesi yleisimm√§t sanat.
            from collections import Counter
            # Jaa teksti sanoiksi, luo sanoista lista ja laske yleisimm√§t sanat.
            words = df[selected_text_column].str.split(expand=True).stack()
            most_common_words = Counter(words).most_common(10)
            # N√§yt√§ lista kymmenest√§ yleisimm√§st√§ sanasta ja niiden esiintymiskerrat.
            st.write(most_common_words)